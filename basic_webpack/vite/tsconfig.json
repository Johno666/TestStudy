{
  "compilerOptions": {
    /* 访问 https://aka.ms/tsconfig 获取更多关于此文件的信息 */

    /* 项目 */
    // "incremental": true,                              /* 保存 .tsbuildinfo 文件以支持项目的增量编译。 */
    // "composite": true,                                /* 启用一些约束，允许 TypeScript 项目使用项目引用。 */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 指定 .tsbuildinfo 增量编译文件的路径。 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 禁用对组合项目中源文件而不是声明文件的偏好。 */
    // "disableSolutionSearching": true,                 /* 编辑时，将项目排除在多项目引用检查之外。 */
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。 */

    /* 语言和环境 */
    "target": "ES2016",                                  /* 设置输出的 JavaScript 语言版本并包含兼容的库声明。 */
    "lib": ["DOM","ES2015"],                                        /* 指定一组捆绑的库声明文件，描述目标运行时环境。 */
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码。 */
    // "experimentalDecorators": true,                   /* 启用对旧的实验性装饰器的实验性支持。 */
    // "emitDecoratorMetadata": true,                    /* 在源文件中，对装饰过的声明生成设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定 JSX 代码的工厂函数，用于目标为 React JSX 的输出。 */
    // "jsxFragmentFactory": "",                         /* 指定 React JSX 输出的片段引用。 */
    // "jsxImportSource": "",                            /* 指定导入 JSX 工厂函数时使用的模块说明符。 */
    // "reactNamespace": "",                             /* 指定用于 'createElement' 的对象。仅适用于目标为 'react' 的 JSX 输出。 */
    // "noLib": true,                                    /* 禁止包含任何库文件，包括默认的 lib.d.ts。 */
    "useDefineForClassFields": true,                  /* 生成符合 ECMAScript 标准的类字段。 */

    /* 模块 */
    "module": "ESNext",                                /* 指定生成的模块代码。 */
    // "rootDir": "./",                                  /* 指定源文件的根文件夹。 */
    "moduleResolution": "node10",                     /* 指定 TypeScript 查找给定模块规范器的文件的方式。 */
    // "baseUrl": "./",                                  /* 指定用于解析非相对模块名称的基本目录。 */
    // "paths": {},                                      /* 指定重新映射导入以进行额外查找的条目集。 */
    // "rootDirs": [],                                   /* 当解析模块时，允许将多个文件夹视为一个。 */
    // "typeRoots": [],                                  /* 指定要包含在编译过程中的类似 './node_modules/@types' 的多个文件夹。 */
    "types": ["vite/client"],                                      /* 指定要包含在没有被源文件引用的情况下的类型包名称。 */
    // "allowUmdGlobalAccess": true,                     /* 允许从模块中访问 UMD 全局对象。 */
    // "moduleSuffixes": [],                             /* 当解析模块时搜索的文件名后缀列表。 */
    // "allowImportingTsExtensions": true,               /* 允许导入包括 TypeScript 文件扩展名的文件。需要设置 '--moduleResolution bundler' 和 '--noEmit' 或 '--emitDeclarationOnly'。 */
    // "resolvePackageJsonExports": true,                /* 在解析包导入时使用 package.json 的 'exports' 字段。 */
    // "resolvePackageJsonImports": true,                /* 在解析导入时使用 package.json 的 'imports' 字段。 */
    // "customConditions": [],                           /* 在解析导入时设置的条件，附加到解析器特定的默认值之外。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件。 */
    // "allowArbitraryExtensions": true,                 /* 允许导入任何扩展名的文件，只要有声明文件存在。 */
    // "noResolve": true,                                /* 不允许 'import'、'require' 或 '<reference>' 扩展 TypeScript 应该添加到项目中的文件数量。 */

    /* JavaScript 支持 */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为项目的一部分。使用 'checkJS' 选项来获取这些文件的错误。 */
    // "checkJs": true,                                  /* 启用类型检查的 JavaScript 文件中的错误报告。 */
    // "maxNodeModuleJsDepth": 1,                        /* 指定从 'node_modules' 检查 JavaScript 文件时使用的最大文件夹深度。仅适用于 'allowJs'。 */

    /* 输出 */
    //"declaration": true,                              /* 从 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
    //"declarationMap": true,                           /* 为 .d.ts 文件创建源映射。 */
    //"emitDeclarationOnly": true,                      /* 仅输出 .d.ts 文件而不是 JavaScript 文件。 */
    // "sourceMap": true,                                /* 为输出的 JavaScript 文件创建源映射文件。 */
    // "inlineSourceMap": true,                          /* 在输出的 JavaScript 中包含源映射。 */
    // "outFile": "./",                                  /* 指定将所有输出捆绑成一个 JavaScript 文件。如果 'declaration' 为 true，则也指定了捆绑所有 .d.ts 输出的文件。 */
    //"outDir": "./",                                   /* 指定所有输出文件的输出文件夹。 */
    // "removeComments": true,                           /* 禁止在输出中生成注释。 */
    //"noEmit": true,                                   /* 禁止编译生成文件。 */
    // "importHelpers": true,                            /* 允许每个项目从 tslib 导入一次助手函数，而不是每个文件都包含它们。 */
    // "importsNotUsedAsValues": "remove",               /* 指定导入仅用于类型的行为。 */
    // "downlevelIteration": true,                       /* 为迭代生成更符合标准但更冗长的 JavaScript。 */
    // "sourceRoot": "",                                 /* 指定调试器查找引用源代码的根路径。 */
    // "mapRoot": "",                                    /* 指定调试器应该查找映射文件的位置，而不是生成的位置。 */
    // "inlineSources": true,                            /* 在输出的 JavaScript 中包含源代码。 */
    // "emitBOM": true,                                  /* 在输出文件的开头添加 UTF-8 字节顺序标记 (BOM)。 */
    // "newLine": "crlf",                                /* 为输出文件设置换行符。 */
    // "stripInternal": true,                            /* 禁止生成带有 '@internal' JSDoc 注释的声明。 */
    // "noEmitHelpers": true,                            /* 禁止在编译输出中生成自定义助手函数，例如 '__extends'。 */
    // "noEmitOnError": true,                            /* 如果报告了任何类型检查错误，则禁止生成文件。 */
    // "preserveConstEnums": true,                       /* 在生成的代码中禁止擦除 'const enum' 声明。 */
    // "declarationDir": "./",                           /* 指定生成声明文件的输出目录。 */
    // "preserveValueImports": true,                     /* 在生成的 JavaScript 输出中保留未使用的导入值，否则会删除它们。 */

    /* 互操作约束 */
    "isolatedModules": true,                          /* 确保每个文件都可以安全地进行转换，而不依赖其他导入。 */
    // "verbatimModuleSyntax": true,                     /* 不转换或删除未标记为仅类型的导入或导出，确保其基于 'module' 设置写入输出文件的格式。 */
    // "allowSyntheticDefaultImports": true,             /* 允许在模块没有默认导出时从 'import x from y' 进行导入。 */
    "esModuleInterop": true,                             /* 生成额外的 JavaScript 以便更容易地支持导入 CommonJS 模块。这启用了 'allowSyntheticDefaultImports' 以进行类型兼容。 */
    // "preserveSymlinks": true,                         /* 禁止将符号链接解析为它们的 realpath。这与 node 中的相同标志相关。 */
    "forceConsistentCasingInFileNames": true,            /* 确保导入时的大小写正确。 */

    /* 类型检查 */
    "strict": true,                                      /* 启用所有严格的类型检查选项。 */
    "noImplicitAny": true,                            /* 启用对隐含 'any' 类型的表达式和声明的错误报告。 */
    "strictNullChecks": true,                         /* 在类型检查时考虑 'null' 和 'undefined'。 */
    // "strictFunctionTypes": true,                      /*当分配函数时，检查确保参数和返回值是子类型兼容的。 */
    // "strictBindCallApply": true,                      /* 检查 'bind'、'call' 和 'apply' 方法的参数是否与原始函数匹配*/
    // "strictPropertyInitialization": true,             /* 检查声明但未在构造函数中设置的类属性。 */
    // "noImplicitThis": true,                           /*  当'this' 被赋予 'any' 类型时启用错误报告。 */
    // "useUnknownInCatchVariables": true,               /* 将 catch 子句中的变量默认为 'unknown'，而不是 'any'。*/
    // "alwaysStrict": true,                             /* 确保始终生成 'use strict'。 */
    "noUnusedLocals": true,                           /* 当局部变量未被读取时启用错误报告。 */
    // "noUnusedParameters": true,                       /*  函数参数未被使用时报错。 */
    // "exactOptionalPropertyTypes": true,               /* 将可选属性类型解释为编写的类型，而不是添加 'undefined'。*/
    // "noImplicitReturns": true,                        /* 在函数中明确返回的路径中启用错误报告。 */
    // "noFallthroughCasesInSwitch": true,               /* 在 switch 语句的 case 中启用错误报告 */
    // "noUncheckedIndexedAccess": true,                 /* 当使用索引访问时，向类型添加 'undefined'。 */
    // "noImplicitOverride": true,                       /* 确保派生类中的覆盖成员带有 override 修饰符。 */
    // "noPropertyAccessFromIndexSignature": true,       /* 强制使用索引访问器为使用索引类型声明的键。 */
    // "allowUnusedLabels": true,                        /*禁用对未使用标签的错误报告。 */
    // "allowUnreachableCode": true,                     /* 禁用对不可达代码的错误报告。 */

    /* 完整性  */
    // "skipDefaultLibCheck": true,                      /* 跳过对 TypeScript 中包含的 .d.ts 文件的类型检查 */
    "skipLibCheck": true                                 /* 跳过对所有 .d.ts 文件的类型检查 */
  }
}
